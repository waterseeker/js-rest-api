openapi: 3.0.1
info:
  title: JS-REST-API
  description: 'This is a API with Users and Articles created with Express.js. You can find more about it [here](https://github.com/waterseeker/js-rest-api).'
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
tags:
- name: user
  description: Operations about user
- name: authentication
  description: User authentication operations
- name: logout
  description: User logout
- name: articles
  description: Operations about articles
paths:
  /api/user:
    post:
      tags:
      - user
      summary: Create a user
      operationId: createUser
      requestBody:
        description: User being created
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        201:
          description: User created
        400:
          description: You must supply a user_id, login, and password in the req.body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/authenticate:
    post:
      tags:
      - authentication
      summary: Authenticate a user
      operationId: authenticateUser
      requestBody:
        description: login and password passed in req.body
        content:
          'application/json':
            schema:
              type: object
              properties:
                login:
                  type: string
                password:
                  type: string
        required: true
      responses:
        200:
          description: User authenticated 
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        401:
          description: User was found in the database, but the password given in the req.body doesn't match what is in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: No user with that username was found in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/logout:
    post:
      tags:
      - logout
      summary: Log a user out
      parameters:
        - in: header
          name: authentication-header
          schema:
            type: string
            format: uuid
          required: true
      operationId: logoutUser
      responses:
        200:
          description: User logged out 
        401:
          description: Invalid user session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/articles:
    post:
      tags:
      - articles
      summary: Create an article
      operationId: createArticle
      parameters:
        - in: header
          name: authentication-header
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        description: Created article object
        content:
          'application/json':
            schema:
              type: object
              properties:
                content:
                  type: string
                visibility:
                  type: string
                activeUserId:
                  type: string
                title:
                  type: string
                article_id:
                  type: string
        required: true
      responses:
        201:
          description: Article created
        400:
          description: "Invalid visibility parameter"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
      - articles
      summary: Get articles
      operationId: getArticles
      parameters:
        - in: header
          name: authentication-header
          schema:
            type: string
            format: uuid
          required: false
      responses:
        200: 
          description: Articles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    content:
                      type: string
                    author:
                      type: string
                    visibility:
                      type: string
                    title:
                      type: string
                    article_id:
                      type: string
components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: string
        login:
          type: string
        password:
          type: string
    Error:
      type: object
      properties:
        error: 
          type: string